// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7KycgN7CbBQrbUdWStFgm4
// Component: flB8Vpd-ER7A

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CartComponent } from "@plasmicpkgs/commerce";
import { ProductBox } from "@plasmicpkgs/commerce";
import { ProductMedia } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";
import { ProductVariantPicker } from "@plasmicpkgs/commerce";
import { ProductQuantity } from "@plasmicpkgs/commerce";
import Select from "../../Select"; // plasmic-import: hXd-xqa7wnmm/component
import Select__Option from "../../Select__Option"; // plasmic-import: mCWiu0FddPuk/component
import { AddToCartButton } from "@plasmicpkgs/commerce";
import Button from "../../Button"; // plasmic-import: FY5fgXVfJgh2/component

import { useScreenVariants as useScreenVariants_6S5Jx2DxMOo6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6s5JX2DxMOo6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7KycgN7CbBQrbUdWStFgm4/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: flB8Vpd-ER7A/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4uv9KfKvscwy/icon
import PlayingCardHeartShapesvgIcon from "./icons/PlasmicIcon__PlayingCardHeartShapesvg"; // plasmic-import: t87eS-NfRue5/icon
import BlackCommentsBubbleSvgrepoComsvgIcon from "./icons/PlasmicIcon__BlackCommentsBubbleSvgrepoComsvg"; // plasmic-import: XUAktjtUygYu/icon
import CartOSvgrepoComsvgIcon from "./icons/PlasmicIcon__CartOSvgrepoComsvg"; // plasmic-import: 2tvSh3IbAsD_/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Tgf-HqwGEQ_n/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  cart?: Flex__<typeof CartComponent>;
  foreground2?: Flex__<"div">;
  select?: Flex__<typeof Select>;
  select2?: Flex__<typeof Select>;
  select3?: Flex__<typeof Select>;
  select4?: Flex__<typeof Select>;
  select5?: Flex__<typeof Select>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6S5Jx2DxMOo6()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ajV1R)}>
            <div className={classNames(projectcss.all, sty.freeBox__kss8M)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__alqM)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__c897H)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rcAid)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__ue2Zt
                      )}
                    >
                      {"Logo"}
                    </h1>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xSMt)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Hqzb
                      )}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__kPw92
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___6P52X
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gl3N3
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <PlayingCardHeartShapesvgIcon
                          className={classNames(projectcss.all, sty.svg__o8L9M)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__teoap
                        )}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__k7LB
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4Nw1L
                          )}
                        >
                          {"Liked by 32k"}
                        </div>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__zq0Dx
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <BlackCommentsBubbleSvgrepoComsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zejkU
                            )}
                            role={"img"}
                          />

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rQfV
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hq3Dp
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </PlasmicLink__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w2Hag
                          )}
                        >
                          {"312 Comments"}
                        </div>
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___2K4B2
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kTo3E
                          )}
                        >
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__aN5T
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uMrrz
                                )}
                                role={"img"}
                              />
                            ) : null}
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___2DReq
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <CartOSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gO0I
                              )}
                              role={"img"}
                            />
                          </PlasmicLink__>
                          <CartComponent
                            data-plasmic-name={"cart"}
                            data-plasmic-override={overrides.cart}
                            className={classNames("__wab_instance", sty.cart)}
                            field={"Size"}
                            hideIfIsEmpty={true}
                          />
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zG74O)}>
                <div className={classNames(projectcss.all, sty.freeBox__nx2Gc)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jdwvF)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__uPpx
                      )}
                    >
                      {"Lorem ipsum dolor\nsit amet."}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mBdMj
                      )}
                    >
                      {
                        "Nosi accusamus rem assumenda incidut enim ea.\nSoluta explicabo desertunt."
                      }
                    </div>
                  </Stack__>
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qjYgq)}
              >
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__obbLl
                  )}
                  component={Link}
                  href={"#shop-look"}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___5LDbv)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o6Bb
                    )}
                  >
                    {"Shop Look"}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__dqRRg)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___7PTif)}>
            <div className={classNames(projectcss.all, sty.freeBox___6Qxy0)} />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__aivhr)}>
            <div className={classNames(projectcss.all, sty.freeBox__sXfpv)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__o4Nml)}
                id={"shop-look"}
              >
                <div className={classNames(projectcss.all, sty.freeBox___5Ip8)}>
                  <ProductBox
                    className={classNames(
                      "__wab_instance",
                      sty.productBox__dQsBy
                    )}
                    id={"oxford-loafers"}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__jAqpo
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___5B40
                            )}
                          >
                            <ProductMedia
                              className={classNames(
                                "__wab_instance",
                                sty.productMedia__mVddR
                              )}
                            />
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.column__zwVEz
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__ehyms)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "150px"
                                  : "200px"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/copy_of_t_7/images/sprinkles1Cd2Da2A2Svg.svg",
                                fullWidth: 180,
                                fullHeight: 150,
                                aspectRatio: 1.198795
                              }}
                            />

                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                sty.h2__lQmY
                              )}
                            >
                              <ProductTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.productTextField___7PbG
                                )}
                                field={"name"}
                              />
                            </h2>
                            <ProductTextField
                              className={classNames(
                                "__wab_instance",
                                sty.productTextField__nDfLv
                              )}
                              field={"description"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__kXvRb
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__rk5XQ
                                )}
                              >
                                <h6
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h6,
                                    sty.h6__cVc6W
                                  )}
                                >
                                  <ProductPriceComponent
                                    className={classNames(
                                      "__wab_instance",
                                      sty.productPrice__ephgO
                                    )}
                                  />
                                </h6>
                                <ProductVariantPicker
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productVariantPicker__ft35
                                  )}
                                />
                              </div>
                            </div>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.columns__qXt6M
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__j0Mup
                                )}
                              >
                                <ProductQuantity
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productQuantity__tf88U
                                  )}
                                >
                                  <Select
                                    data-plasmic-name={"select"}
                                    data-plasmic-override={overrides.select}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select
                                    )}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select",
                                        "value"
                                      ])(eventArgs[0]);
                                    }}
                                    placeholder={"1"}
                                    value={generateStateValueProp($state, [
                                      "select",
                                      "value"
                                    ])}
                                  />
                                </ProductQuantity>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__vNoxe
                                )}
                              >
                                <AddToCartButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.addToCartButton__llyly
                                  )}
                                >
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__rkSC
                                    )}
                                    color={"pink"}
                                    submitsForm={true}
                                  >
                                    {"ADD TO CART"}
                                  </Button>
                                </AddToCartButton>
                              </div>
                            </Stack__>
                          </Stack__>
                        </div>
                      )}
                    </DataCtxReader__>
                  </ProductBox>
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___0HOzP)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "90px"
                      : "106px"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/copy_of_t_7/images/sprinkles2D589E9E91Svg.svg",
                    fullWidth: 138,
                    fullHeight: 150,
                    aspectRatio: 0.921739
                  }}
                />
              </Stack__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___9XdFy)} />

          <div className={classNames(projectcss.all, sty.freeBox__qZr4W)}>
            <div className={classNames(projectcss.all, sty.freeBox__j9FmP)}>
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__jnxee)}
                id={"lorem-ankle-length"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__lzzft)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.column___6JTua
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            sty.h2__udqXn
                          )}
                        >
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__hoqK8
                            )}
                            field={"name"}
                          />
                        </h2>
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField___8H9Lz
                          )}
                          field={"description"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__gSv2P
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__wBno
                            )}
                          >
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                sty.h6__dz50A
                              )}
                            >
                              <ProductPriceComponent
                                className={classNames(
                                  "__wab_instance",
                                  sty.productPrice__ln8D3
                                )}
                              />
                            </h6>
                            <ProductVariantPicker
                              className={classNames(
                                "__wab_instance",
                                sty.productVariantPicker__fn9Hk
                              )}
                            />
                          </div>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.columns__htet1
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__xtLj8
                            )}
                          >
                            <ProductQuantity
                              className={classNames(
                                "__wab_instance",
                                sty.productQuantity__obRxz
                              )}
                            >
                              <Select
                                data-plasmic-name={"select2"}
                                data-plasmic-override={overrides.select2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select2
                                )}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "select2",
                                    "value"
                                  ])(eventArgs[0]);
                                }}
                                placeholder={"1"}
                                value={generateStateValueProp($state, [
                                  "select2",
                                  "value"
                                ])}
                              />
                            </ProductQuantity>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___4Qeo2
                            )}
                          >
                            <AddToCartButton
                              className={classNames(
                                "__wab_instance",
                                sty.addToCartButton__ad9CR
                              )}
                            >
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__qdMTa
                                )}
                                color={"yellow"}
                                submitsForm={true}
                              >
                                {"ADD TO CART"}
                              </Button>
                            </AddToCartButton>
                          </div>
                        </Stack__>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__sdVo2
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__rpJkd)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_t_7/images/anklepng.png",
                            fullWidth: 740,
                            fullHeight: 1000,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </Stack__>
                  )}
                </DataCtxReader__>
              </ProductBox>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wyuD)} />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__txXsH)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ed49I)}>
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__kZxu5)}
                id={"baseball-cap"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.columns___84GMu
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__m0ZFg
                        )}
                      >
                        <ProductMedia
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia__mH7Bc
                          )}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.column__cbna8
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__g5S9M)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "150px"
                              : "200px"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_t_7/images/sprinkles1Cd2Da2A2Svg.svg",
                            fullWidth: 180,
                            fullHeight: 150,
                            aspectRatio: 1.198795
                          }}
                        />

                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            sty.h2__sIrkT
                          )}
                        >
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__lXjrA
                            )}
                            field={"name"}
                          />
                        </h2>
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__dihh5
                          )}
                          field={"description"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__oPnic
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__hcoGj
                            )}
                          >
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                sty.h6__olCo
                              )}
                            >
                              <ProductPriceComponent
                                className={classNames(
                                  "__wab_instance",
                                  sty.productPrice__qBJuo
                                )}
                              />
                            </h6>
                            <ProductVariantPicker
                              className={classNames(
                                "__wab_instance",
                                sty.productVariantPicker___4TClq
                              )}
                            />
                          </div>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.columns__jbs2L
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__fxW8O
                            )}
                          >
                            <ProductQuantity
                              className={classNames(
                                "__wab_instance",
                                sty.productQuantity__lsR01
                              )}
                            >
                              <Select
                                data-plasmic-name={"select3"}
                                data-plasmic-override={overrides.select3}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select3
                                )}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "select3",
                                    "value"
                                  ])(eventArgs[0]);
                                }}
                                placeholder={"1"}
                                value={generateStateValueProp($state, [
                                  "select3",
                                  "value"
                                ])}
                              />
                            </ProductQuantity>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___4GaQ
                            )}
                          >
                            <AddToCartButton
                              className={classNames(
                                "__wab_instance",
                                sty.addToCartButton__luhCi
                              )}
                            >
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__pxTL
                                )}
                                color={"pink"}
                                submitsForm={true}
                              >
                                {"ADD TO CART"}
                              </Button>
                            </AddToCartButton>
                          </div>
                        </Stack__>
                      </Stack__>
                    </div>
                  )}
                </DataCtxReader__>
              </ProductBox>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__sCh00)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "90px"
                  : "106px"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/copy_of_t_7/images/sprinkles2D589E9E91Svg.svg",
                fullWidth: 138,
                fullHeight: 150,
                aspectRatio: 0.921739
              }}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__dsBCw)} />

          <div className={classNames(projectcss.all, sty.freeBox__tzxG)}>
            <div className={classNames(projectcss.all, sty.freeBox__xm5X5)}>
              <div className={classNames(projectcss.all, sty.freeBox__yHiKh)}>
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__jUa4I
                  )}
                  id={"triangle-bikini-top"}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__oM5Jt
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__b5T1B
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              sty.h2__aeJsb
                            )}
                          >
                            <ProductTextField
                              className={classNames(
                                "__wab_instance",
                                sty.productTextField__zn11Y
                              )}
                              field={"name"}
                            />
                          </h2>
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__bVnxY
                            )}
                            field={"description"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns___0FE7C
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__wdhM
                              )}
                            >
                              <h6
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h6,
                                  sty.h6__k038
                                )}
                              >
                                <ProductPriceComponent
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productPrice__hByv3
                                  )}
                                />
                              </h6>
                              <ProductVariantPicker
                                className={classNames(
                                  "__wab_instance",
                                  sty.productVariantPicker__nVzCx
                                )}
                              />
                            </div>
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.columns__au4Ox
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__ezW3Q
                              )}
                            >
                              <ProductQuantity
                                className={classNames(
                                  "__wab_instance",
                                  sty.productQuantity__qQvn
                                )}
                              >
                                <Select
                                  data-plasmic-name={"select4"}
                                  data-plasmic-override={overrides.select4}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select4
                                  )}
                                  onChange={(...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "select4",
                                      "value"
                                    ])(eventArgs[0]);
                                  }}
                                  placeholder={"1"}
                                  value={generateStateValueProp($state, [
                                    "select4",
                                    "value"
                                  ])}
                                />
                              </ProductQuantity>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__r6YUi
                              )}
                            >
                              <AddToCartButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.addToCartButton__n9HoC
                                )}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button___8GVua
                                  )}
                                  color={"yellow"}
                                  submitsForm={true}
                                >
                                  {"ADD TO CART"}
                                </Button>
                              </AddToCartButton>
                            </div>
                          </Stack__>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___69KFp
                          )}
                        >
                          <ProductMedia
                            className={classNames(
                              "__wab_instance",
                              sty.productMedia__tDgTl
                            )}
                          />
                        </div>
                      </div>
                    )}
                  </DataCtxReader__>
                </ProductBox>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jxNeo)} />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lUd3W)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__irKs9)}>
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__z3Pu1)}
                id={"short-blazer"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.columns__a7Sfb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__rl7Lt
                        )}
                      >
                        <ProductMedia
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia__yfnuE
                          )}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.column__lz5Qg
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__sBxZb)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "150px"
                              : "200px"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_t_7/images/sprinkles1Cd2Da2A2Svg.svg",
                            fullWidth: 180,
                            fullHeight: 150,
                            aspectRatio: 1.198795
                          }}
                        />

                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            sty.h2__l3VKx
                          )}
                        >
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__oKlSv
                            )}
                            field={"name"}
                          />
                        </h2>
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__pZzDx
                          )}
                          field={"description"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns___9Pspe
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__lcuXy
                            )}
                          >
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                sty.h6__sqqHq
                              )}
                            >
                              <ProductPriceComponent
                                className={classNames(
                                  "__wab_instance",
                                  sty.productPrice__vhOvZ
                                )}
                              />
                            </h6>
                            <ProductVariantPicker
                              className={classNames(
                                "__wab_instance",
                                sty.productVariantPicker__ezhlk
                              )}
                            />
                          </div>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.columns__tSsoO
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__biupN
                            )}
                          >
                            <ProductQuantity
                              className={classNames(
                                "__wab_instance",
                                sty.productQuantity__z5Umt
                              )}
                            >
                              <Select
                                data-plasmic-name={"select5"}
                                data-plasmic-override={overrides.select5}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select5
                                )}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "select5",
                                    "value"
                                  ])(eventArgs[0]);
                                }}
                                placeholder={"1"}
                                value={generateStateValueProp($state, [
                                  "select5",
                                  "value"
                                ])}
                              />
                            </ProductQuantity>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__m6ESq
                            )}
                          >
                            <AddToCartButton
                              className={classNames(
                                "__wab_instance",
                                sty.addToCartButton__qb7Qz
                              )}
                            >
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__qpXhm
                                )}
                                color={"pink"}
                                submitsForm={true}
                              >
                                {"ADD TO CART"}
                              </Button>
                            </AddToCartButton>
                          </div>
                        </Stack__>
                      </Stack__>
                    </div>
                  )}
                </DataCtxReader__>
              </ProductBox>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__lWcoa)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "90px"
                  : "166px"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/copy_of_t_7/images/sprinkles35Ed71774Svg.svg",
                fullWidth: 130,
                fullHeight: 150,
                aspectRatio: 0.865591
              }}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qPqqO)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mv1Ht)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__b95Nf)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hN46
                  )}
                >
                  {"\u00c2\u00a9 Company. All rights reserved. "}
                </div>
              </Stack__>
            </div>
          </Stack__>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "cart",
    "foreground2",
    "select",
    "select2",
    "select3",
    "select4",
    "select5"
  ],
  cart: ["cart"],
  foreground2: ["foreground2"],
  select: ["select"],
  select2: ["select2"],
  select3: ["select3"],
  select4: ["select4"],
  select5: ["select5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  cart: typeof CartComponent;
  foreground2: "div";
  select: typeof Select;
  select2: typeof Select;
  select3: typeof Select;
  select4: typeof Select;
  select5: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cart: makeNodeComponent("cart"),
    foreground2: makeNodeComponent("foreground2"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),
    select4: makeNodeComponent("select4"),
    select5: makeNodeComponent("select5"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
